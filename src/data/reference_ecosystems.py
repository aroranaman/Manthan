# FILE: src/data/reference_ecosystems.py
import pandas as pd
from dataclasses import dataclass
from typing import Dict, List, Tuple, Optional
from pathlib import Path
import json

@dataclass
class SpeciesProfile:
    """
    Defines the ecological niche and characteristics of a plant species.
    This structure holds the ground-truth parameters for compatibility scoring.
    """
    name: str
    scientific_name: str
    min_rainfall: Optional[float] = None  # in mm
    max_rainfall: Optional[float] = None  # in mm
    min_temp: Optional[float] = None      # in °C
    max_temp: Optional[float] = None      # in °C
    min_soil_ph: Optional[float] = None
    max_soil_ph: Optional[float] = None
    # Future additions could include soil type, elevation range, etc.

def load_reference_ecosystem_data() -> Tuple[pd.DataFrame, Dict[int, SpeciesProfile]]:
    """
    Loads the reference ecosystem data from a CSV file and the master species database.

    The reference data is dynamically generated by `build_reference_data.py`,
    ensuring it is based on real pipeline outputs, not hard-coded values.

    Returns:
        Tuple[pd.DataFrame, Dict[int, SpeciesProfile]]: A tuple containing:
            - A DataFrame of reference ecosystems with their environmental parameters.
            - A dictionary mapping unique species IDs to their ecological profiles.
    """
    # --- Master Species Database ---
    # This remains defined here, but in a future step, it could also be moved to a database.
    species_db: Dict[int, SpeciesProfile] = {
        1: SpeciesProfile("Sal", "Shorea robusta", 1000, 3000, 15, 38, 5.5, 7.0),
        2: SpeciesProfile("Teak", "Tectona grandis", 800, 2500, 20, 40, 6.0, 7.5),
        3: SpeciesProfile("Khejri", "Prosopis cineraria", 200, 600, 5, 50, 7.0, 8.5),
        4: SpeciesProfile("Rohida", "Tecomella undulata", 200, 600, 5, 50, 7.0, 8.5),
        5: SpeciesProfile("Cullenia", "Cullenia exarillata", 2000, 7000, 18, 32, 4.5, 6.5),
        6: SpeciesProfile("Wild Nutmeg", "Myristica dactyloides", 2000, 7000, 18, 32, 4.5, 6.5),
        7: SpeciesProfile("Himalayan Oak", "Quercus lamellosa", 1500, 4000, 10, 28, 5.0, 6.5),
        8: SpeciesProfile("Rhododendron", "Rhododendron arboreum", 1500, 4000, 10, 28, 5.0, 6.5),
        9: SpeciesProfile("Neem", "Azadirachta indica", 400, 1200, 20, 45, 6.0, 8.5),
        10: SpeciesProfile("Banyan", "Ficus benghalensis", 500, 2500, 15, 40, 6.0, 7.5),
    }

    # --- Load Reference Ecosystems from CSV ---
    # This replaces the hard-coded DataFrame.
    try:
        # Determine the path to the CSV file relative to the project root
        project_root = Path(__file__).resolve().parents[2]
        csv_path = project_root / "data" / "reference_ecosystems.csv"
        
        reference_df = pd.read_csv(csv_path)
        
        # Convert the species_ids column from a JSON string back to a list of integers
        reference_df['species_ids'] = reference_df['species_ids'].apply(json.loads)
        
    except FileNotFoundError:
        print("ERROR: reference_ecosystems.csv not found.")
        print("Please run `python src/data/build_reference_data.py` to generate it.")
        # Return an empty DataFrame as a fallback to prevent crashing
        reference_df = pd.DataFrame(columns=[
            'name', 'species_ids', 'annual_precipitation', 'mean_temperature', 
            'elevation', 'soil_ph', 'soil_organic_carbon', 'clay_content', 
            'sand_content', 'data_confidence'
        ])

    return reference_df, species_db